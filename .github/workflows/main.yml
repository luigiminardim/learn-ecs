name: Deploy Nextjs to Amazon ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_REGION: us-east-1
      ECR_NEXTJS_REPOSITORY: learnecs/nextjs
      ECR_NGINX_REPOSITORY: learnecs/nginx
      ECS_SERVICE: nextjs-and-nginx
      ECS_CLUSTER: learnecs
      ECS_TASK_DEFINITION: .aws/task-definitions/nextjs-and-nginx.json
      NEXTJS_CONTAINER_NAME: nextjs
      NGINX_CONTAINER_NAME: nextjs
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push Nextjs image to Amazon ECR
        id: build-image-nextjs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_NEXTJS_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_NEXTJS_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_NEXTJS_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new Nextjs image ID in the Amazon ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.NEXTJS_CONTAINER_NAME }}
          image: ${{ steps.build-image-nextjs.outputs.image }}
  
      - name: Build, tag, and push Nginx image to Amazon ECR
        id: build-image-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG -f ./nginx.Dockerfile .
          docker push $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
      - name: Fill in the new Nginx image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.NGINX_CONTAINER_NAME }}
          image: ${{ steps.build-image-nginx.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
